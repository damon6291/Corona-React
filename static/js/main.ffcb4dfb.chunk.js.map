{"version":3,"sources":["components/Cards/Card.jsx","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","components/Cards/Card.module.css","App.module.css","components/Cards/Cards.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","assets/image.png"],"names":["Scard","status","value","date","sentence","s","Grid","item","component","Card","xs","md","className","cx","styles","card","infected","recovered","deaths","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","Cards","data","confirmed","lastUpdate","container","spacing","justify","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","fetchDailyData","map","dailyData","total","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchApi","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","setCountries","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImgae","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.ffcb4dfb.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport CountUp from \"react-countup\";\nimport styles from \"./Card.module.css\";\nimport cx from \"classnames\";\n\nconst Scard = ({ status, value, date, sentence }) => {\n  const s = `${status}`;\n\n  const findStyle = () => {\n    if (s === \"Infected\") return styles.infected;\n    if (s === \"Recovered\") return styles.recovered;\n    if (s === \"Deaths\") return styles.deaths;\n  };\n\n  return (\n    <Grid item component={Card} xs={12} md={3} className={cx(styles.card, findStyle())}>\n      <CardContent>\n        <Typography color=\"textSecondary\" gutterBottom>\n          {status}\n        </Typography>\n        <Typography variant=\"h5\">\n          <CountUp start={0} end={value} duration={2.5} separator=\",\" />\n        </Typography>\n        <Typography color=\"textSecondary\">{new Date(date).toDateString()}</Typography>\n        <Typography variant=\"body2\">{sentence}</Typography>\n      </CardContent>\n    </Grid>\n  );\n};\n\nexport default Scard;\n","import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport styles from \"./Cards.module.css\";\nimport Scard from \"./Card\";\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n  if (!confirmed) {\n    return \"Loading...\";\n  }\n\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justify=\"center\">\n        <Scard\n          status=\"Infected\"\n          value={confirmed.value}\n          date={lastUpdate}\n          sentence=\"Number of active cases of COVID-19.\"\n        />\n        <Scard\n          status=\"Recovered\"\n          value={recovered.value}\n          date={lastUpdate}\n          sentence=\"Number of recoveries from COVID-19.\"\n        />\n        <Scard\n          status=\"Deaths\"\n          value={deaths.value}\n          date={lastUpdate}\n          sentence=\"Number of deaths caused by COVID-19.\"\n        />\n      </Grid>\n    </div>\n  );\n};\n\nexport default Cards;\n","import axios from \"axios\";\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async (country) => {\n  let changeableUrl = url;\n  if (country) {\n    changeableUrl = `${url}/countries/${country}`;\n  }\n  try {\n    const {\n      data: { confirmed, recovered, deaths, lastUpdate },\n    } = await axios.get(changeableUrl);\n\n    const modifiedData = {\n      confirmed,\n      recovered,\n      deaths,\n      lastUpdate,\n    };\n    return modifiedData;\n  } catch (error) {}\n};\n\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(`${url}/daily`);\n    const modifiedData = data.map((dailyData) => ({\n      confirmed: dailyData.confirmed.total,\n      deaths: dailyData.deaths.total,\n      date: dailyData.reportDate,\n    }));\n\n    return modifiedData;\n  } catch (error) {}\n};\n\nexport const fetchCountries = async () => {\n  try {\n    const {\n      data: { countries },\n    } = await axios.get(`${url}/countries`);\n\n    return countries.map((country) => country.name);\n  } catch (error) {}\n};\n","import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api\";\nimport { Line, Bar } from \"react-chartjs-2\";\n\nimport styles from \"./Chart.module.css\";\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n  const [dailyData, setDailyData] = useState([]);\n\n  useEffect(() => {\n    const fetchApi = async () => {\n      setDailyData(await fetchDailyData());\n    };\n\n    fetchApi();\n  }, [dailyData]);\n\n  const lineChart = dailyData.length ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ date }) => date),\n        datasets: [\n          {\n            data: dailyData.map((data) => data.confirmed),\n            label: \"Infected\",\n            borderColor: \"#3333ff\",\n            fill: true,\n          },\n          {\n            data: dailyData.map((data) => data.deaths),\n            label: \"Deaths\",\n            borderColor: \"red\",\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\n            fill: true,\n          },\n        ],\n      }}\n    />\n  ) : null;\n\n  const barChart = confirmed ? (\n    <Bar\n      data={{\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n        datasets: [\n          {\n            label: \"People\",\n            backgroundColor: [\n              \"rgba(0, 0, 255, 0.5)\",\n              \"rgba(0, 255, 0, 0.5)\",\n              \"rgba(255, 0, 0, 0.5)\",\n            ],\n            data: [confirmed.value, recovered.value, deaths.value],\n          },\n        ],\n      }}\n      options={{\n        legend: { display: false },\n        title: { display: true, text: `Current state in ${country}` },\n      }}\n    />\n  ) : null;\n\n  return <div className={styles.container}>{country ? barChart : lineChart}</div>;\n};\n\nexport default Chart;\n","import React, { useEffect, useState } from \"react\";\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\n\nimport styles from \"./CountryPicker.module.css\";\n\nimport { fetchCountries } from \"../../api\";\n\nconst CountryPicker = ({ handleCountryChange }) => {\n  const [countries, setCountries] = useState([]);\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setCountries(await fetchCountries());\n    };\n\n    fetchAPI();\n  }, [countries]);\n\n  return (\n    <FormControl className={styles.formControl}>\n      <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n        <option value=\"\">Global </option>\n        {countries.map((country, i) => (\n          <option key={i} value={country}>\n            {country}\n          </option>\n        ))}\n      </NativeSelect>\n    </FormControl>\n  );\n};\n\nexport default CountryPicker;\n","import React, { Component } from \"react\";\nimport { Cards, Chart, CountryPicker } from \"./components\";\nimport styles from \"./App.module.css\";\nimport { fetchData } from \"./api\";\nimport coronaImgae from \"./assets/image.png\";\n\nclass App extends Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({ data: fetchedData });\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({ data: fetchedData, country: country });\n  };\n\n  render() {\n    const { data, country } = this.state;\n    return (\n      <div className={styles.container}>\n        <img className={styles.image} src={coronaImgae} />\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={country} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1XdBb\",\"infected\":\"Card_infected__11gc_\",\"recovered\":\"Card_recovered__v9icT\",\"deaths\":\"Card_deaths__3M97h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\",\"imgae\":\"App_imgae__1pUny\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}